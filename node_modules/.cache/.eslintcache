[{"/Users/aaron1013_chen/Desktop/未命名檔案夾/react api/src/index.js":"1","/Users/aaron1013_chen/Desktop/未命名檔案夾/react api/src/App.js":"2","/Users/aaron1013_chen/Desktop/未命名檔案夾/react api/src/components/NumberLists/index.js":"3","/Users/aaron1013_chen/Desktop/未命名檔案夾/react api/src/components/footer/index.js":"4","/Users/aaron1013_chen/Desktop/未命名檔案夾/react api/src/components/header/index.js":"5","/Users/aaron1013_chen/Desktop/未命名檔案夾/react api/src/components/sidebar/index.js":"6","/Users/aaron1013_chen/Desktop/未命名檔案夾/react api/src/components/NumberLists/api.js":"7","/Users/aaron1013_chen/Desktop/未命名檔案夾/react api/src/components/menu/index.js":"8"},{"size":410,"mtime":1625448566163,"results":"9","hashOfConfig":"10"},{"size":495,"mtime":1625817762453,"results":"11","hashOfConfig":"10"},{"size":18258,"mtime":1625819927858,"results":"12","hashOfConfig":"10"},{"size":177,"mtime":1624349668344,"results":"13","hashOfConfig":"10"},{"size":626,"mtime":1624349597545,"results":"14","hashOfConfig":"10"},{"size":177,"mtime":1625448748843,"results":"15","hashOfConfig":"10"},{"size":452,"mtime":1625032904252,"results":"16","hashOfConfig":"10"},{"size":356,"mtime":1624349684253,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"e8gl5v",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/aaron1013_chen/Desktop/未命名檔案夾/react api/src/index.js",[],["36","37"],"/Users/aaron1013_chen/Desktop/未命名檔案夾/react api/src/App.js",[],"/Users/aaron1013_chen/Desktop/未命名檔案夾/react api/src/components/NumberLists/index.js",["38"],"import React, { useEffect, useState } from 'react';\nimport {\n  Table, Pagination, Grid, Form, Modal, Dropdown, Confirm,\n} from 'semantic-ui-react';\nimport { CSVLink } from 'react-csv';\nimport {\n  apiUser, userCreate, userDelete, userModify,\n} from './api';\nimport styles from './css.less';\nimport './css.css';\n\nconst NumberLists = () => {\n  // 初始化\n  const pageListQuery = {\n    first_result: 0,\n    max_results: 20,\n    total: 50,\n  };\n  const userQuery = {\n    username: '',\n    enable: '',\n    locked: '',\n    start_created_at: '',\n    end_created_at: '',\n  };\n\n  // 表單選項\n  const selectEnable = [\n    { key: 0, text: '全部', value: 2 },\n    { key: 1, text: '啟用', value: 1 },\n    { key: 2, text: '停用', value: 0 },\n  ];\n  const selectLocked = [\n    { key: 0, text: '全部', value: 2 },\n    { key: 1, text: '正常', value: 1 },\n    { key: 2, text: '封鎖', value: 0 },\n  ];\n  const formEnable = [\n    { key: 1, text: '啟用', value: 1 },\n    { key: 2, text: '停用', value: 0 },\n  ];\n  const formLocked = [\n    { key: 1, text: '正常', value: 1 },\n    { key: 2, text: '封鎖', value: 0 },\n  ];\n\n  // 顯示會員列表\n  const [apiData, setApiData] = useState(userQuery);\n  const [userList, setUserList] = useState([]);\n  const [pageList, setPageList] = useState(pageListQuery);\n  // 搜尋會員資料\n  const [userInfos, setUserInfos] = useState(userQuery);\n\n  // 建立、修改、刪除\n  const [formBtnOpen, setFormBtnOpen] = useState(false);\n  const [deleteBtnOpen, setDeleteBtnOpen] = useState(false);\n  const [modifyCheck, setModifyCheck] = useState(false);\n\n  const [userData, setUserData] = useState({\n    id: '',\n    username: '',\n    enable: '',\n    locked: '',\n  });\n\n  const [deleteUser, setDeleteUser] = useState({\n    id: '',\n  });\n  // 匯出功能\n  const [exportBtnOpen, setExportBtnOpen] = useState(false);\n  const exportHeaders = [\n    { label: '會員編號', key: 'id' },\n    { label: '會員名稱', key: 'username' },\n    { label: '註冊時間', key: 'created_at' },\n    { label: '狀態', key: 'enable' },\n    { label: '異常', key: 'locked' },\n  ];\n  const exportData = [];\n  // 清除表單內容\n  const clearPage = () => {\n    setApiData(userQuery);\n    setUserInfos(userQuery);\n  };\n\n  // 更新列表\n  const fetchData = async (data) => {\n    await apiUser(data).then((response) => {\n      setUserList(response.data.ret);\n      setPageList(response.data.pagination);\n      if (response.data.pagination.total === 0) {\n        alert('查無此資料');\n        clearPage();\n      }\n    });\n  };\n\n  useEffect(() => {\n    fetchData(apiData);\n  }, [apiData]);\n\n  // 顯示年月日\n  const showTime = (date) => {\n    const creatTime = new Date(date);\n    const showDate = `${creatTime.getFullYear()}年${creatTime.getMonth() + 1}月${creatTime.getDate()}日`;\n    return showDate;\n  };\n\n  // 搜尋表單內容\n  const searchPage = () => {\n    const searchQuery = {\n      ...apiData,\n      ...userInfos,\n      ...{ first_result: 0 },\n    };\n    if (searchQuery.enable === 2) {\n      searchQuery.enable = '';\n    }\n    if (searchQuery.locked === 2) {\n      searchQuery.locked = '';\n    }\n\n    if (searchQuery.start_created_at && searchQuery.end_created_at) {\n      searchQuery.end_created_at = `${searchQuery.end_created_at}T23:59:59+08:00`;\n    } else {\n      searchQuery.start_created_at = '';\n      searchQuery.end_created_at = '';\n    }\n    setApiData(searchQuery);\n  };\n\n  const clearCreateData = () => {\n    setUserData({\n      username: '',\n      enable: '',\n      locked: '',\n    });\n  };\n\n  // 切換頁面\n  const changePage = (e, pageInfo) => {\n    const changeQuery = {\n      ...apiData,\n      first_result: (parseInt(pageInfo.activePage, 10) - 1) * pageList.max_results,\n    };\n    setApiData(changeQuery);\n  };\n  // 確認是否符合當前搜尋\n  const checkLists = (userInfo) => {\n    const checkList = {\n      username: true,\n      enable: true,\n      locked: true,\n    };\n    if (apiData.username !== '') {\n      checkList.username = userInfo.username.indexOf(apiData.username) !== -1;\n    }\n    if (apiData.enable !== '') {\n      checkList.enable = apiData.enable === userInfo.enable;\n    }\n    if (apiData.locked !== '') {\n      checkList.locked = apiData.locked === userInfo.locked;\n    }\n    return checkList.username && checkList.locked && checkList.enable;\n  };\n\n  // 新增會員\n  const errorCheck = (userInfo) => {\n    const errorName = userInfo.username;\n    const errorLocked = String(userInfo.locked);\n    const errorEnable = String(userInfo.enable);\n    const checkError = errorName && errorLocked && errorEnable;\n    return checkError;\n  };\n\n  const createBtn = async () => {\n    const result = await userCreate(userData);\n    if (result.data.result === 'ok') {\n      if (checkLists(userData)) {\n        const userTotal = pageList.total;\n        const firstResult = pageList.max_results;\n        let activePage = Math.ceil(userTotal / firstResult) - 1;\n        if (userTotal % firstResult === 0) {\n          activePage = Math.ceil(userTotal / firstResult);\n        }\n        const info = { ...apiData, first_result: activePage * pageList.max_results };\n        setApiData(info);\n      }\n    }\n  };\n\n  // 抓取會員修改後的資料\n  const modifyInfo = (getUserInfo) => {\n    const userInfo = {\n      id: parseInt(getUserInfo.id, 10),\n      username: getUserInfo.username,\n      enable: parseInt(getUserInfo.enable, 10),\n      locked: parseInt(getUserInfo.locked, 10),\n    };\n    setUserData(userInfo);\n  };\n\n  // 修改會員\n  const modifyBtn = async () => {\n    const userInfo = { ...userData };\n    const result = await userModify(userInfo.id, userInfo);\n    if (result.data.result === 'ok') {\n      const userTotal = pageList.total;\n      const firstResult = pageList.max_results;\n      let activePage = pageList.first_result;\n      if (userList.length === 1) {\n        activePage = (Math.ceil(userTotal / firstResult) - 2) * pageList.max_results;\n      }\n      const info = { ...apiData, first_result: activePage };\n      setApiData(info);\n    }\n  };\n\n  // 抓取會員的ID\n  const deleteInfo = (getUserInfo) => {\n    const userInfo = {\n      id: parseInt(getUserInfo.id, 10),\n      username: getUserInfo.username,\n    };\n    setDeleteUser(userInfo);\n  };\n\n  // 刪除會員\n  const deleteBtn = async () => {\n    const userInfo = { ...deleteUser };\n    const result = await userDelete(userInfo.id);\n    if (result.data.result === 'ok') {\n      const userTotal = pageList.total;\n      const firstResult = pageList.max_results;\n      let activePage = Math.ceil(userTotal / firstResult) - 1;\n      if (userList.length === 1) {\n        activePage = Math.ceil(userTotal / firstResult) - 2;\n      }\n      const info = { ...apiData, first_result: activePage * pageList.max_results };\n      setApiData(info);\n    }\n  };\n\n  // 匯出功能\n  const exportDataInfo = (user) => {\n    exportData.push({\n      id: user.id,\n      username: user.username,\n      created_at: showTime(user.created_at),\n      enable: user.enable,\n      locked: user.locked,\n    });\n  };\n\n  return (\n    <div className=\"wrap-content\">\n      <div className={styles.number_table}>\n        <Grid>\n          <Grid.Column floated=\"right\" width={16}>\n            <div>\n              <Form className=\"form-style\">\n                <Form.Input\n                  label=\"會員名稱\"\n                  value={userInfos.username}\n                  onChange={(e, pageInfo) => {\n                    setUserInfos({ ...userInfos, username: pageInfo.value });\n                  }}\n                />\n                <Form.Field className=\"form-date\">\n                  <p>開始日期</p>\n                  <input\n                    type=\"date\"\n                    name=\"start_created_at\"\n                    value={userInfos.start_created_at}\n                    onChange={(e) => {\n                      setUserInfos({ ...userInfos, start_created_at: e.target.value });\n                    }}\n                  />\n                </Form.Field>\n                <Form.Field className=\"form-date\">\n                  <p>結束日期</p>\n                  <input\n                    type=\"date\"\n                    name=\"end_created_at\"\n                    placeholder=\"結束日期\"\n                    value={userInfos.end_created_at}\n                    onChange={(e) => {\n                      setUserInfos({ ...userInfos, end_created_at: e.target.value });\n                    }}\n                  />\n                </Form.Field>\n                <Form.Field>\n                  <p>狀態</p>\n                  <Dropdown\n                    name=\"enable\"\n                    placeholder=\"請選擇\"\n                    selection\n                    options={selectEnable}\n                    value={parseInt(userInfos.enable, 10)}\n                    onChange={(e, pageInfo) => {\n                      setUserInfos({ ...userInfos, enable: pageInfo.value });\n                    }}\n                  />\n                </Form.Field>\n                <Form.Field>\n                  <p>異常</p>\n                  <Dropdown\n                    name=\"locked\"\n                    placeholder=\"請選擇\"\n                    selection\n                    options={selectLocked}\n                    value={parseInt(userInfos.locked, 10)}\n                    onChange={(e, pageInfo) => {\n                      setUserInfos({ ...userInfos, locked: pageInfo.value });\n                    }}\n                  />\n                </Form.Field>\n                <div className=\"form-btn\">\n                  <button className=\"ui button\" type=\"submit\" onClick={searchPage}>搜尋</button>\n                  <button className=\"ui button\" type=\"submit\" onClick={clearPage}>清除</button>\n                </div>\n              </Form>\n              <p className=\"total\">\n                {`目前有 ${parseInt(pageList.total, 10)} 人`}\n              </p>\n            </div>\n          </Grid.Column>\n        </Grid>\n        <Table singleLine>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>會員編號</Table.HeaderCell>\n              <Table.HeaderCell>會員名稱</Table.HeaderCell>\n              <Table.HeaderCell>註冊時間</Table.HeaderCell>\n              <Table.HeaderCell>狀態</Table.HeaderCell>\n              <Table.HeaderCell>異常</Table.HeaderCell>\n              <Table.HeaderCell> </Table.HeaderCell>\n              <Table.HeaderCell> </Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {\n              userList.map((user) => (\n                <Table.Row key={user.id}>\n                  <Table.Cell className=\"user-id\">{user.id}</Table.Cell>\n                  <Table.Cell className=\"user-name\">{user.username}</Table.Cell>\n                  <Table.Cell className=\"user-create-time\">{showTime(user.created_at)}</Table.Cell>\n                  <Table.Cell className=\"user-enable\">{user.enable ? '啟用' : '停用'}</Table.Cell>\n                  <Table.Cell className=\"user-locked\">{user.locked ? '' : '已封鎖'}</Table.Cell>\n                  <Table.Cell className=\"user-edit\">\n                    <button\n                      className=\"ui button\"\n                      type=\"button\"\n                      onClick={() => {\n                        modifyInfo(user);\n                        setFormBtnOpen(true);\n                        setModifyCheck(true);\n                      }}\n                    >\n                      編輯\n                    </button>\n                  </Table.Cell>\n                  <Table.Cell className=\"user-delete\">\n                    <button\n                      className=\"ui red button\"\n                      type=\"button\"\n                      color=\"red\"\n                      onClick={() => {\n                        deleteInfo(user);\n                        setDeleteBtnOpen(true);\n                      }}\n                    >\n                      刪除\n                    </button>\n                  </Table.Cell>\n                </Table.Row>\n              ))\n            }\n          </Table.Body>\n        </Table>\n        <div className=\"table-control\">\n          <Pagination\n            siblingRange={1}\n            ellipsisItem={null}\n            totalPages={Math.ceil(pageList.total / pageList.max_results)}\n            onPageChange={changePage}\n            activePage={pageList.first_result / pageList.max_results + 1}\n          />\n          <button\n            type=\"button\"\n            className=\"ui positive button\"\n            onClick={() => setFormBtnOpen(true)}\n          >\n            會員新增\n          </button>\n          <button\n            type=\"button\"\n            className=\"ui positive button export\"\n            onClick={() => setExportBtnOpen(true)}\n          >\n            匯出資料\n          </button>\n        </div>\n      </div>\n      {/* 彈跳視窗 */}\n      <Modal\n        onClose={() => setFormBtnOpen(false)}\n        onOpen={() => setFormBtnOpen(true)}\n        open={formBtnOpen}\n      >\n        <Modal.Header>{modifyCheck ? '會員修改' : '新增會員'}</Modal.Header>\n        <Modal.Content>\n          <Form\n            id=\"create-form\"\n            className=\"form-style\"\n            onSubmit={() => {\n              if (errorCheck(userData)) {\n                if (modifyCheck) {\n                  modifyBtn();\n                  setModifyCheck(false);\n                  clearCreateData();\n                } else {\n                  createBtn();\n                  clearCreateData();\n                }\n                setFormBtnOpen(false);\n              }\n            }}\n          >\n            <Form.Input\n              label=\"會員名稱\"\n              name=\"username\"\n              value={userData.username}\n              onChange={(e, pageInfo) => {\n                setUserData({ ...userData, username: pageInfo.value });\n              }}\n              error={!(userData.username)}\n            />\n            <Form.Field>\n              <p>狀態</p>\n              <Dropdown\n                name=\"enable\"\n                placeholder=\"請選擇\"\n                selection\n                options={formEnable}\n                value={parseInt(userData.enable, 10)}\n                onChange={(e, pageInfo) => {\n                  setUserData({ ...userData, enable: parseInt(pageInfo.value, 10) });\n                }}\n                error={!(String(userData.enable))}\n              />\n            </Form.Field>\n            <Form.Field>\n              <p>異常</p>\n              <Dropdown\n                name=\"locked\"\n                placeholder=\"請選擇\"\n                selection\n                options={formLocked}\n                value={parseInt(userData.locked, 10)}\n                onChange={(e, pageInfo) => {\n                  setUserData({ ...userData, locked: parseInt(pageInfo.value, 10) });\n                }}\n                error={!(String(userData.locked))}\n              />\n            </Form.Field>\n          </Form>\n        </Modal.Content>\n        <Modal.Actions>\n          <button\n            type=\"button\"\n            className=\"ui black button\"\n            onClick={() => {\n              setFormBtnOpen(false);\n              clearCreateData();\n              setModifyCheck(false);\n            }}\n          >\n            取消\n          </button>\n          <button type=\"submit\" className=\"ui positive button\" form=\"create-form\">\n            {modifyCheck ? '修改' : '新增'}\n          </button>\n        </Modal.Actions>\n      </Modal>\n      {/* 刪除彈跳視窗 */}\n      <Confirm\n        className=\"remove-form\"\n        open={deleteBtnOpen}\n        header=\"移除會員\"\n        content={(\n          <div className=\"content\">\n            確定刪除\n            <span style={{ color: '#db2828', fontWeight: 'bold' }}>\n              {` ${deleteUser.username} `}\n            </span>\n            此會員？\n          </div>\n)}\n        cancelButton=\"取消\"\n        confirmButton=\"移除\"\n        onCancel={() => {\n          setDeleteBtnOpen(false);\n        }}\n        onConfirm={() => {\n          deleteBtn();\n          setDeleteBtnOpen(false);\n        }}\n      />\n      {/* 匯出彈跳視窗 */}\n      <Modal\n        onClose={() => setExportBtnOpen(false)}\n        onOpen={() => setExportBtnOpen(true)}\n        open={exportBtnOpen}\n      >\n        <Modal.Header>會員匯出</Modal.Header>\n        <Modal.Content>\n          <Table singleLine>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>會員編號</Table.HeaderCell>\n                <Table.HeaderCell>會員名稱</Table.HeaderCell>\n                <Table.HeaderCell>註冊時間</Table.HeaderCell>\n                <Table.HeaderCell>狀態</Table.HeaderCell>\n                <Table.HeaderCell>異常</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {\n                userList.map((user) => (\n                  <Table.Row key={user.id}>\n                    <Table.Cell className=\"user-id\">{user.id}</Table.Cell>\n                    <Table.Cell className=\"user-name\">{user.username}</Table.Cell>\n                    <Table.Cell className=\"user-create-time\">{showTime(user.created_at)}</Table.Cell>\n                    <Table.Cell className=\"user-enable\">{user.enable ? '啟用' : '停用'}</Table.Cell>\n                    <Table.Cell className=\"user-locked\">{user.locked ? '' : '已封鎖'}</Table.Cell>\n                    {exportDataInfo(user)}\n                  </Table.Row>\n                ))\n              }\n            </Table.Body>\n          </Table>\n        </Modal.Content>\n        <Modal.Actions>\n          <button\n            type=\"button\"\n            className=\"ui black button\"\n            onClick={() => {\n              setExportBtnOpen(false);\n            }}\n          >\n            取消\n          </button>\n          <CSVLink\n            data={exportData}\n            headers={exportHeaders}\n            className=\"ui positive button\"\n            onClick={() => {\n              setExportBtnOpen(false);\n            }}\n            filename={`會員資料_${showTime(new Date())}`}\n          >\n            匯出\n          </CSVLink>\n        </Modal.Actions>\n      </Modal>\n    </div>\n  );\n};\n\nexport default NumberLists;\n","/Users/aaron1013_chen/Desktop/未命名檔案夾/react api/src/components/footer/index.js",[],"/Users/aaron1013_chen/Desktop/未命名檔案夾/react api/src/components/header/index.js",[],"/Users/aaron1013_chen/Desktop/未命名檔案夾/react api/src/components/sidebar/index.js",[],"/Users/aaron1013_chen/Desktop/未命名檔案夾/react api/src/components/NumberLists/api.js",[],"/Users/aaron1013_chen/Desktop/未命名檔案夾/react api/src/components/menu/index.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":99,"column":6,"nodeType":"45","endLine":99,"endColumn":15,"suggestions":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["49"],"no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},"Update the dependencies array to be: [apiData, fetchData]",{"range":"52","text":"53"},[2443,2452],"[apiData, fetchData]"]